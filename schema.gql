# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """
  Returns the Business Asset available in integration for business Account
  """
  getBrandAssets(brandId: String!): BrandAssetsResponse!

  """Validate Invitation Code"""
  validateInvitationCode(invitationCode: String!): String!

  """Get logged in user or NULL if it is not logged in"""
  getLoggedInUser: User
}

type BrandAssetsResponse {
  adAccounts: [AdAccount!]
  socialAccounts: [SocialAccount!]
}

type AdAccount {
  id: ID!
}

type SocialAccount {
  id: ID!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String
  isAdmin: Boolean!
  businessAccount: BusinessAccount
  termsAndConditionsAccepted: DateTime
  emailVerified: Boolean!
  isContractValid: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type BusinessAccount {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  businessName: String!
  users: [User!]!
  brands: [Brand!]
  businessLogoUrl: String
  businessPhone: String
  website: String
  address: String
}

type Brand {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logoUrl: String
  status: [BrandStatus!]
  sector: [Sector!]
  adAccounts: [String!]
  socialAccounts: [String!]
  businessAccount: BusinessAccount!
}

"""Brand Status"""
enum BrandStatus {
  IN_PROGRESS
  DATA_READY
  MODEL_TRAINING
  READY
}

enum Sector {
  ApparelAndAccessories
  BeautyAndPersonalCare
  FoodAndBeverage
  HomeAndGarden
  SportsAndFitness
  HomeAppliances
  HomeImprovement
  HouseholdSupplies
  PetCare
  TobaccoAndSmokingAccessories
  ToysAndGames
  OilAndGas
  RenewableEnergy
  Utilities
  BankingAndLending
  Insurance
  InvestmentAndWealthManagement
  PharmaceuticalsAndBiotechnology
  MedicalDevices
  HealthcareServices
  ConstructionAndEngineering
  AerospaceAndDefense
  TransportationEquipment
  SoftwareAndITServices
  HardwareAndElectronics
  InternetServices
  TelecommunicationsEquipment
  TelecommunicationsServices
  NetworkingEquipment
  AirlinesAndAirTransportation
  HotelsAndResorts
  RestaurantsAndFoodServices
  TravelAgenciesAndTourOperators
  AmusementParksAndAttractions
  TelevisionBroadcastingAndProduction
  FilmProductionAndDistribution
  MusicRecordingAndProduction
  Publishing
  Gaming
  ResidentialRealEstate
  CommercialRealEstate
  RealEstateInvestmentTrusts
  RealEstateDevelopmentAndConstruction
  PublicAndPrivateSchools
  CollegesAndUniversities
  OnlineEducationPlatforms
  VocationalAndTechnicalSchools
  CorporateTrainingAndDevelopment
}

type Mutation {
  """Creates a business Account for the provided business admin"""
  createBrand(input: CreateBrandInput!): Brand!

  """Change Brand Status"""
  updateBrandStatus(input: UpdateBrandStatusInput!, brandId: String!): Brand!

  """Updates optional fields of a brand"""
  updateBrand(input: UpdateBrandInput!, brandId: String!): Brand!

  """Updates assets of a brand"""
  updateBrandAssets(input: BrandAssetsInput!, brandId: String!): Brand!

  """Uploads brand logo"""
  requestLogoUploadData(input: UploadRequestInput!): UploadDataResponse!

  """Creates a business Account for the provided business admin"""
  createBusinessAccount(input: CreateBusinessAccountInput!): BusinessAccount!

  """Updates optional fields of a business Account"""
  updateBusinessAccount(input: UpdateBusinessAccountInput!): BusinessAccount!

  """Cancel Business Account"""
  cancelBusinessAccount: BusinessAccount!

  """Generate referral invitations"""
  createReferralInvitations(numberOfInvitations: Float!): [Invitation!]!

  """Generate internal invitations"""
  createInternalInvitations(config: InvitationInput!): [Invitation!]!

  """Delete Invitation Code"""
  deleteInvitation(invitationCode: String!): Boolean!

  """Log in user"""
  logIn(input: AuthenticationInput!): LoggedInUser!

  """Refresh log in token"""
  refreshLogInToken: String!

  """
  Update user profile. If setting new password and current password is invalid, BAD_REQUEST is thrown
  """
  updateUserProfile(input: UserProfileInput!): User!

  """Accept terms and conditions for current user"""
  acceptTermsAndConditions: Boolean!

  """Create the new User using a Invitation Code"""
  signUp(code: String!, user: SignUpInput!): User!

  """Logout user"""
  logout: Boolean!
}

input CreateBrandInput {
  name: String!
  logoUrl: String
  sector: [Sector!]!
}

input UpdateBrandStatusInput {
  status: [BrandStatus!]
}

input UpdateBrandInput {
  name: String
  logoUrl: String
  sector: [Sector!]
}

input BrandAssetsInput {
  adAccount: [AdAccountInput!]
  socialAccount: [SocialAccountInput!]
}

input AdAccountInput {
  id: Int!
  type: AdAccountType!
}

"""AdAccountType"""
enum AdAccountType {
  MetaAdAccount
  TiktokAdAccount
}

input SocialAccountInput {
  id: Int!
  type: SocialAccountType!
}

"""SocialAccountType"""
enum SocialAccountType {
  FacebookPage
  InstagramAccount
  TiktokAccount
}

type UploadDataResponse {
  id: String!
  originalUrl: String!
  presignedData: PresignedData!
}

type PresignedData {
  url: String!
  fields: String!
}

input UploadRequestInput {
  mimeType: String!
  extension: String!
}

input CreateBusinessAccountInput {
  businessName: String!
}

input UpdateBusinessAccountInput {
  businessName: String
  address: String
  businessPhone: String
  website: String
  businessLogoUrl: String
}

type Invitation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: String!
  email: String
  type: InvitationType!
  isAdmin: Boolean!
  expirationDate: DateTime
}

"""All invitation type enum values"""
enum InvitationType {
  referral
  internal
}

input InvitationInput {
  email: String
  isAdmin: Boolean = false
  numberOfInvitations: Int = 1
}

type LoggedInUser {
  sessionToken: String!
}

input AuthenticationInput {
  email: String!
  password: String!
}

input UserProfileInput {
  name: String

  """Required if 'New Password' is sent. Must match current user password."""
  currentPassword: String

  """Requires 'Current Password' to also be sent"""
  newPassword: String
}

input SignUpInput {
  name: String!
  email: String!
  password: String!
}
